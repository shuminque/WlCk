<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 仓库调度记录(depository_record) -->
<mapper namespace="com.depository_manage.mapper.DepositoryRecordMapper">
    <!-- This code was generated by TableGo tools, mark 1 begin. -->
    <!-- 字段映射 -->
    <resultMap id="simpleDepositoryRecordMap" type="com.depository_manage.entity.SimpleDepositoryRecord">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="type" property="type" jdbcType="INTEGER" />
        <result column="applicant_id" property="applicantId" jdbcType="INTEGER" />
        <result column="apply_remark" property="applyRemark" jdbcType="VARCHAR" />
        <result column="apply_time" property="applyTime" jdbcType="TIMESTAMP" />
        <result column="at_id" property="atId" jdbcType="INTEGER" />
        <result column="mname" property="mname" jdbcType="VARCHAR" />
        <result column="model" property="model" jdbcType="VARCHAR" />
        <result column="price" property="price" jdbcType="VARCHAR" />
        <result column="quantity" property="quantity" jdbcType="VARCHAR" />
        <result column="review_group_id" property="review_group_id" jdbcType="INTEGER" />
    </resultMap>
    <!-- 字段映射 -->
    <resultMap id="depositoryRecordMap" type="com.depository_manage.entity.DepositoryRecord">
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="application_id" property="applicationId" jdbcType="INTEGER" />
        <result column="at_id" property="atId" jdbcType="INTEGER" />
        <result column="mname" property="mname" jdbcType="VARCHAR" />
        <result column="depository_id" property="depositoryId" jdbcType="INTEGER" />
        <result column="type" property="type" jdbcType="INTEGER" />
        <result column="model" property="model" jdbcType="VARCHAR" />
        <result column="type_name" property="typeName" jdbcType="VARCHAR" />
        <result column="engin_name" property="enginName" jdbcType="VARCHAR" />
        <result column="quantity" property="quantity" jdbcType="VARCHAR" />
        <result column="price" property="price" jdbcType="VARCHAR" />
        <result column="state" property="state" jdbcType="VARCHAR" />
        <result column="applicant_id" property="applicantId" jdbcType="INTEGER" />
        <result column="apply_remark" property="applyRemark" jdbcType="VARCHAR" />
        <result column="apply_time" property="applyTime" jdbcType="TIMESTAMP" />
        <result column="review_group_id" property="review_group_id" jdbcType="INTEGER" />
        <result column="reviewer_id" property="reviewerId" jdbcType="INTEGER" />
        <result column="review_remark" property="reviewRemark" jdbcType="VARCHAR" />
        <result column="review_time" property="reviewTime" jdbcType="TIMESTAMP" />
        <result column="review_pass" property="reviewPass" jdbcType="INTEGER" />
        <result column="checker_id" property="checkerId" jdbcType="INTEGER" />
        <result column="check_remark" property="checkRemark" jdbcType="VARCHAR" />
        <result column="check_time" property="checkTime" jdbcType="TIMESTAMP" />
        <result column="check_pass" property="checkPass" jdbcType="INTEGER" />
    </resultMap>


    <!-- 表查询字段 -->
    <sql id="simpleColumns">
        dr.id, dr.type, dr.applicant_id, dr.apply_remark, dr.apply_time, dr.review_group_id, dr.at_id, dr.mname, dr.model, dr.quantity, dr.price
    </sql>
    <!-- 表查询字段 -->
    <sql id="allColumns">
        dr.id, dr.application_id, dr.at_id, dr.mname, dr.depository_id, dr.type, dr.model, dr.type_name, dr.engin_name, dr.quantity, dr.price, dr.state,
        dr.applicant_id, dr.apply_remark, dr.apply_time, dr.reviewer_id, dr.review_remark, dr.review_time, dr.review_pass,
        dr.checker_id, dr.check_remark, dr.review_group_id,  dr.check_time, dr.check_pass
    </sql>
    <!-- 查询所有数据行数 -->
    <select id="findCount" resultType="integer">
        SELECT
        count(*)
        FROM depository_record dr
    </select>
    <!-- 查询相应用户的任务数 -->
    <select id="findMyTaskCount" resultType="integer" parameterType="map">
        SELECT
        count(*)
        FROM depository_record dr where 1=1
        <if test='isDone == "0"'>
            and (dr.review_time is null and dr.reviewer_id =#{userId})
            or (dr.check_time is null and dr.checker_id = #{userId})
        </if>
        <if test='isDone == "1"'>
            and (dr.review_time is not null and dr.reviewer_id =#{userId})
            or (dr.check_time is not null and dr.checker_id = #{userId})
        </if>
    </select>
    <!-- 查询所有数据 -->
    <select id="findCountByCondition" resultType="integer" parameterType="map">
        SELECT
        count(*)
        FROM depository_record dr WHERE 1 = 1
        <if test="applicationId != null">
            AND dr.application_id = #{applicationId}
        </if>
        <if test="atId != null">
            AND dr.at_id = #{atId}
        </if>
        <if test="mname != null and mname != ''">
            AND dr.mname LIKE CONCAT('%', #{mname}, '%')
        </if>
        <if test="depositoryId != null">
            AND dr.depository_id = #{depositoryId}
        </if>
        <if test="type != null">
            AND dr.type = #{type}
        </if>
        <if test="model != null and model != ''">
            AND dr.model LIKE CONCAT('%', #{model}, '%')
        </if>
        <if test="typeName != null and typeName.size > 0">
            AND dr.type_name IN
            <foreach item="item" index="index" collection="typeName" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="enginName != null and enginName != ''">
            AND dr.engin_name LIKE CONCAT('%', #{enginName}, '%')
        </if>
        <if test="quantity != null">
            AND dr.quantity = #{quantity}
        </if>
        <if test="price != null">
            AND dr.price = #{price}
        </if>
        <if test="state != null and state != ''">
            AND dr.state LIKE CONCAT('%', #{state}, '%')
        </if>
        <if test="applicantId != null">
            AND dr.applicant_id = #{applicantId}
        </if>
        <if test="applyRemark != null and applyRemark.size > 0">
            AND (
            <foreach item="item" index="index" collection="applyRemark" open="" separator=" OR " close="">
                dr.apply_remark LIKE CONCAT('%', #{item}, '%')
            </foreach>
            )
        </if>
        <if test="startDate != null and endDate != null">
            AND DATE(dr.apply_time) BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test="reviewerId != null">
            AND dr.reviewer_id = #{reviewerId}
        </if>
        <if test="reviewRemark != null and reviewRemark != ''">
            AND dr.review_remark LIKE CONCAT('%', #{reviewRemark}, '%')
        </if>
        <if test="reviewTime != null">
            AND dr.review_time = #{reviewTime}
        </if>
        <if test="reviewPass != null">
            AND dr.review_pass = #{reviewPass}
        </if>
        <if test="checkerId != null">
            AND dr.checker_id = #{checkerId}
        </if>
        <if test="checkRemark != null and checkRemark != ''">
            AND dr.check_remark LIKE CONCAT('%', #{checkRemark}, '%')
        </if>
        <if test="checkTime != null">
            AND dr.check_time = #{checkTime}
        </if>
        <if test="checkPass != null">
            AND dr.check_pass = #{checkPass}
        </if>
    </select>
    <!-- 查询所有数据 -->
    <select id="findDepositoryRecordAll" resultMap="depositoryRecordMap">
        SELECT
        <include refid="allColumns" />
        FROM depository_record dr
    </select>
    <!-- 根据id查询数据 -->
    <select id="findDepositoryRecordById" resultMap="depositoryRecordMap" parameterType="integer">
        SELECT
        <include refid="allColumns" />
        FROM depository_record dr
        where dr.id=#{id}
    </select>

    <!-- 根据isDone来寻找完成任务或者未完成任务 -->
    <select id="findMyTask" resultMap="simpleDepositoryRecordMap" parameterType="map">
        SELECT
        <include refid="simpleColumns" />
        FROM depository_record dr
        INNER JOIN user u ON dr.applicant_id = u.id
        WHERE 1=1
        <if test='isDone == "0"'>
            <choose>
                <!-- 当reviewGroup为3时，匹配1或2的任务 -->
                <when test='reviewGroup == "3"'>
                    AND (dr.review_time is null AND dr.review_group_id IN (1, 2))
                </when>
                <!-- 其他情况，匹配指定的reviewGroup -->
                <otherwise>
                    AND (dr.review_time is null AND dr.review_group_id = #{reviewGroup})
                </otherwise>
            </choose>
        </if>

        <if test='isDone == "1"'>
            AND (dr.review_time is not null AND ( dr.review_group_id = #{reviewGroup}))
        </if>
        <if test="startDate != null and endDate != null">
            AND DATE(dr.apply_time) BETWEEN #{startDate} AND #{endDate}
        </if>
        ORDER BY dr.id DESC
        <if test="begin != null and size != null">
            LIMIT #{begin},#{size}
        </if>
    </select>

    <select id="findDepositoryRecordByCondition" resultMap="depositoryRecordMap" parameterType="map">
        SELECT
        <include refid="allColumns" />
        FROM depository_record dr WHERE 1 = 1
        <if test="applicationId != null">
            AND dr.application_id = #{applicationId}
        </if>
        <if test="atId != null">
            AND dr.at_id = #{atId}
        </if>
        <if test="mname != null and mname != ''">
            AND dr.mname LIKE CONCAT('%', #{mname}, '%')
        </if>
        <if test="depositoryId != null">
            AND dr.depository_id = #{depositoryId}
        </if>
        <if test="type != null">
            AND dr.type = #{type}
        </if>
        <if test="model != null and model != ''">
            AND dr.model LIKE CONCAT('%', #{model}, '%')
        </if>
        <if test="typeName != null and typeName.size > 0">
            AND dr.type_name IN
            <foreach item="item" index="index" collection="typeName" open="(" separator="," close=")">
                #{item}
            </foreach>
        </if>
        <if test="enginName != null and enginName != ''">
            AND dr.engin_name LIKE CONCAT('%', #{enginName}, '%')
        </if>
        <if test="quantity != null">
            AND dr.quantity = #{quantity}
        </if>
        <if test="price != null">
            AND dr.price = #{price}
        </if>
        <if test="state != null and state != ''">
            AND dr.state LIKE CONCAT('%', #{state}, '%')
        </if>
        <if test="applicantId != null">
            AND dr.applicant_id = #{applicantId}
        </if>
        <if test="applyRemark != null and applyRemark.size > 0">
            AND (
            <foreach item="item" index="index" collection="applyRemark" open="" separator=" OR " close="">
                dr.apply_remark LIKE CONCAT('%', #{item}, '%')
            </foreach>
            )
        </if>
        <if test="startDate != null and endDate != null">
            AND DATE(dr.apply_time) BETWEEN #{startDate} AND #{endDate}
        </if>
        <if test="reviewerId != null">
            AND dr.reviewer_id = #{reviewerId}
        </if>
        <if test="reviewRemark != null and reviewRemark != ''">
            AND dr.review_remark LIKE CONCAT('%', #{reviewRemark}, '%')
        </if>
        <if test="reviewTime != null">
            AND dr.review_time = #{reviewTime}
        </if>
        <if test="reviewPass != null">
            AND dr.review_pass = #{reviewPass}
        </if>
        <if test="checkerId != null">
            AND dr.checker_id = #{checkerId}
        </if>
        <if test="checkRemark != null and checkRemark != ''">
            AND dr.check_remark LIKE CONCAT('%', #{checkRemark}, '%')
        </if>
        <if test="checkTime != null">
            AND dr.check_time = #{checkTime}
        </if>
        <if test="checkPass != null">
            AND dr.check_pass = #{checkPass}
        </if>
        ORDER BY dr.id DESC
        <if test="begin != null and size != null">
            LIMIT #{begin},#{size}
        </if>
    </select>

    <!-- 根据主键查询数据 -->
    <select id="findDepositoryRecordByIds" resultMap="depositoryRecordMap" parameterType="list">
        SELECT
        <include refid="allColumns" />
        FROM depository_record dr WHERE dr.id IN
        <foreach collection="list" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>
    
    <!-- 插入数据 -->
    <insert id="insertDepositoryRecord" parameterType="map" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        INSERT INTO depository_record (
            id, application_id, at_id,  mname, depository_id, type, model, type_name, engin_name, quantity, price, state,
            applicant_id, apply_remark, apply_time,
            reviewer_id, review_remark, review_time,review_pass, checker_id, check_remark,
            check_time,check_pass,review_group_id
        ) VALUES (
            #{id},
            #{applicationId},
            #{atId},
            #{mname},
            #{depositoryId},
            #{type},
            #{model},
            #{typeName},
            #{enginName},
            #{quantity},
            #{price},
            #{state},
            #{applicantId},
            #{applyRemark},
            #{applyTime},
            #{reviewerId},
            #{reviewRemark},
            #{reviewTime},
            #{reviewPass},
            #{checkerId},
            #{checkRemark},
            #{checkTime},
            #{checkPass},
            #{review_group_id}
        )
    </insert>
    
    <!-- 批量插入数据 -->
    <insert id="insertDepositoryRecords" parameterType="list">
        INSERT INTO depository_record (
        id, application_id, mname, at_id, depository_id, type, model, type_name, engin_name, quantity, price, state,
        applicant_id, apply_remark, apply_time, reviewer_id, review_remark, review_time,review_pass, checker_id, check_remark,
        check_time,check_pass,review_group_id
        ) VALUES
        <foreach collection="list" index="index" item="item" separator=",">
            (
                #{id},
                #{applicationId},
                #{atId},
                #{mname},
                #{depositoryId},
                #{type},
                #{model},
                #{typeName},
                #{enginName},
                #{quantity},
                #{price},
                #{state},
                #{applicantId},
                #{applyRemark},
                #{applyTime},
                #{reviewerId},
                #{reviewRemark},
                #{reviewTime},
                #{reviewPass},
                #{checkerId},
                #{checkRemark},
                #{checkTime},
                #{checkPass},
                #{review_group_id},
            )
        </foreach>
    </insert>
    
    <!-- 修改数据 -->
    <update id="updateDepositoryRecord" parameterType="map">
        UPDATE depository_record
        <set>
            <if test="applicationId != null">
                application_id = #{applicationId},
            </if>
            <if test="atId != null">
                at_id = #{atId},
            </if>
            <if test="mname != null">
                mname = #{mname},
            </if>
            <if test="depositoryId != null">
                depository_id = #{depositoryId},
            </if>
            <if test="type != null">
                type = #{type},
            </if>
            <if test="model != null">
                model = #{model},
            </if>
            <if test="typeName != null">
                type_name = #{typeName},
            </if>
            <if test="enginName != null">
                engin_name = #{enginName},
            </if>
            <if test="quantity != null">
                quantity = #{quantity},
            </if>
            <if test="price != null">
                price = #{price},
            </if>
            <if test="state != null">
                state = #{state},
            </if>
            <if test="applicantId != null">
                applicant_id = #{applicantId},
            </if>
            <if test="applyRemark != null">
                apply_remark = #{applyRemark},
            </if>
            <if test="applyTime != null">
                apply_time = #{applyTime},
            </if>
            <if test="reviewerId != null">
                reviewer_id = #{reviewerId},
            </if>
            <if test="reviewRemark != null">
                review_remark = #{reviewRemark},
            </if>
            <if test="reviewTime != null">
                review_time = #{reviewTime},
            </if>
            <if test="reviewPass != null">
                review_pass = #{reviewPass},
            </if>
            <if test="checkerId != null">
                checker_id = #{checkerId},
            </if>
            <if test="checkRemark != null">
                check_remark = #{checkRemark},
            </if>
            <if test="checkTime != null">
                check_time = #{checkTime},
            </if>
            <if test="checkPass != null">
                check_pass = #{checkPass}
            </if>
        </set>
        WHERE id = #{id}
    </update>
    
    <!-- 批量修改数据 -->
    <update id="updateDepositoryRecords" parameterType="list">
        <foreach collection="list" index="index" item="item" separator=";">
            UPDATE depository_record
            <set>
                <if test="applicationId != null">
                    application_id = #{applicationId},
                </if>
                <if test="atId != null">
                    at_id = #{atId},
                </if>
                <if test="mname != null">
                    mname = #{mname},
                </if>
                <if test="depositoryId != null">
                    depository_id = #{depositoryId},
                </if>
                <if test="type != null">
                    type = #{type},
                </if>
                <if test="model != null">
                    model = #{model},
                </if>
                <if test="typeName != null">
                    type_name = #{typeName},
                </if>
                <if test="enginName != null">
                    engin_name = #{enginName},
                </if>
                <if test="quantity != null">
                    quantity = #{quantity},
                </if>
                <if test="price != null">
                    price = #{price},
                </if>
                <if test="state != null">
                    state = #{state},
                </if>
                <if test="applicantId != null">
                    applicant_id = #{applicantId},
                </if>
                <if test="applyRemark != null">
                    apply_remark = #{applyRemark},
                </if>
                <if test="applyTime != null">
                    apply_time = #{applyTime},
                </if>
                <if test="reviewerId != null">
                    reviewer_id = #{reviewerId},
                </if>
                <if test="reviewRemark != null">
                    review_remark = #{reviewRemark},
                </if>
                <if test="reviewTime != null">
                    review_time = #{reviewTime},
                </if>
                <if test="reviewPass != null">
                    review_pass = #{reviewPass},
                </if>
                <if test="checkerId != null">
                    checker_id = #{checkerId},
                </if>
                <if test="checkRemark != null">
                    check_remark = #{checkRemark},
                </if>
                <if test="checkTime != null">
                    check_time = #{checkTime},
                </if>
                <if test="checkPass != null">
                    check_pass = #{checkPass}
                </if>
            </set>
            WHERE id = #{item.id}
        </foreach>
    </update>
    
    <!-- 根据主键删除数据 -->
    <delete id="deleteDepositoryRecordById" parameterType="integer">
        DELETE FROM depository_record WHERE id = #{id}
    </delete>
    
    <!-- 根据主键批量删除数据 -->
    <delete id="deleteDepositoryRecordByIds" parameterType="list">
        DELETE FROM depository_record WHERE id IN
        <foreach collection="list" index="index" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="getMonthlyAmountsForYear" resultType="com.depository_manage.pojo.MonthlyAmountDTO" parameterType="string">
        WITH MonthlyAmounts AS (
            SELECT
                DATE_FORMAT(time, '%Y-%m') as month,  -- Using 'time' column from once_fill
            depositoryId as depository_id,        -- Using 'depositoryId' column from once_fill
            1 as type, -- Inbound for once_fill records
            SUM(unit_price * quantity) as amount
        FROM once_fill
        WHERE DATE_FORMAT(time, '%Y') = #{year}
        GROUP BY DATE_FORMAT(time, '%Y-%m'), depositoryId
        UNION ALL
        SELECT
            DATE_FORMAT(time, '%Y-%m') as month,  -- Using 'time' column from once_fill
        depositoryId as depository_id,        -- Using 'depositoryId' column from once_fill
        0 as type, -- Outbound for once_fill records
        SUM(unit_price * quantity) as amount
        FROM once_fill
        WHERE DATE_FORMAT(time, '%Y') = #{year}
        GROUP BY DATE_FORMAT(time, '%Y-%m'), depositoryId

        UNION ALL

        SELECT
            DATE_FORMAT(apply_time, '%Y-%m') as month,
        depository_id,                        -- Using 'depository_id' column from depository_record
        type,
        SUM(price * quantity) as amount
        FROM depository_record
        WHERE DATE_FORMAT(apply_time, '%Y') = #{year}
          AND review_pass = 1
        GROUP BY DATE_FORMAT(apply_time, '%Y-%m'), depository_id, type
            )
        SELECT
            month,
            ROUND(SUM(CASE WHEN depository_id = 1 AND type = 1 THEN amount ELSE 0 END), 2) as sabInboundAmount,
            ROUND(SUM(CASE WHEN depository_id = 1 AND type = 0 THEN amount ELSE 0 END), 2) as sabOutboundAmount,
            ROUND(SUM(CASE WHEN depository_id = 1 AND type = 1 THEN amount ELSE 0 END) - SUM(CASE WHEN depository_id = 1 AND type = 0 THEN amount ELSE 0 END), 2) as sabStockAmount,
            ROUND(SUM(CASE WHEN depository_id = 2 AND type = 1 THEN amount ELSE 0 END), 2) as zabInboundAmount,
            ROUND(SUM(CASE WHEN depository_id = 2 AND type = 0 THEN amount ELSE 0 END), 2) as zabOutboundAmount,
            ROUND(SUM(CASE WHEN depository_id = 2 AND type = 1 THEN amount ELSE 0 END) - SUM(CASE WHEN depository_id = 2 AND type = 0 THEN amount ELSE 0 END), 2) as zabStockAmount
        FROM MonthlyAmounts
        GROUP BY month
        ORDER BY month;
    </select>
    <select id="getCategoryOutboundsForYearMonth" resultType="com.depository_manage.pojo.CategoryOutboundDTO" parameterType="java.util.Map">
        WITH CategoryOutbounds AS (
            -- 从 once_fill 表查询
            SELECT
                DATE_FORMAT(time, '%Y-%m') as month,
            c.title AS category,
            c.id AS category_id,
            SUM(o.unit_price * o.quantity) AS amount
        FROM
            once_fill o
            JOIN categories c ON o.apply_remark LIKE CONCAT('%', c.title, '%')
            AND c.id NOT IN (SELECT parent_id FROM categories WHERE parent_id IS NOT NULL)
            AND c.parent_id NOT IN (SELECT id FROM categories WHERE title = '销售出库')
        WHERE
            DATE_FORMAT(time, '%Y') = #{year} AND DATE_FORMAT(time, '%m') = #{month}
          AND o.depositoryId= #{depositoryId}
          AND c.depository_id= #{depositoryId}
        GROUP BY
            DATE_FORMAT(time, '%Y-%m'), c.id, c.title

        UNION ALL

        -- 从 depository_record 表查询
        SELECT
            DATE_FORMAT(apply_time, '%Y-%m') as month,
            c.title AS category,
            c.id AS category_id,
            SUM(d.price * d.quantity) AS amount
        FROM
            depository_record d
            JOIN categories c ON d.apply_remark LIKE CONCAT('%', c.title, '%')
            AND c.id NOT IN (SELECT parent_id FROM categories WHERE parent_id IS NOT NULL)
            AND c.parent_id NOT IN (SELECT id FROM categories WHERE title = '销售出库')
        WHERE
            d.type = 0
          AND d.review_pass = 1
          AND d.depository_id= #{depositoryId}
          AND c.depository_id= #{depositoryId}
          AND DATE_FORMAT(apply_time, '%Y') = #{year} AND DATE_FORMAT(apply_time, '%m') = #{month}
        GROUP BY
            DATE_FORMAT(apply_time, '%Y-%m'), c.id, c.title
            )
        SELECT
            month,
            category,
            ROUND(SUM(amount)) AS amount
        FROM
            CategoryOutbounds
        GROUP BY
            month, category, category_id
        ORDER BY
            month, category_id;
    </select>
    <select id="fetchMonthlyAmountByTypeAndYear" resultType="com.depository_manage.pojo.MonthlyAmountDTO" parameterType="map">
        WITH MonthlyAmount AS (
            SELECT
            MONTH(combined.date) AS month,
            ROUND(SUM(combined.total_price), 2) AS monthly_amount
        FROM (
            -- 从 depository_record 表查询金额
            SELECT
            dr.type_name AS type_name,
            dr.apply_time AS date,
            dr.quantity * dr.price AS total_price
            FROM depository_record dr
            WHERE dr.type_name IN (SELECT tname FROM material_type WHERE id = #{typeId})
            AND YEAR(dr.apply_time) = #{year}
            and depository_id =#{depositoryId}

            UNION ALL

            -- 从 once_fill 表查询金额
            SELECT
            mt.tname AS type_name,
            off.time AS date,
            off.unit_price * off.quantity AS total_price
            FROM once_fill off
            INNER JOIN material_type mt ON off.type_id = mt.id
            WHERE mt.id = #{typeId}
            AND YEAR(off.time) = #{year}
            and depositoryId =#{depositoryId}
            ) AS combined
        GROUP BY MONTH(combined.date)
            ),
            TypeClassification AS (
        SELECT
            id AS typeId,
            CASE
            WHEN tname LIKE '%小径型号%' THEN 'smallDiameter'
            WHEN tname LIKE '%中径型号%' THEN 'mediumDiameter'
            WHEN tname LIKE '%万向节%' THEN 'gimbal'
            WHEN tname LIKE '%RAB%' THEN 'rab'
            -- 如果有其他分类，可以继续在此添加
            ELSE 'other'
            END AS classification
        FROM material_type
            ),
            MonthlyProduction AS (
        SELECT
            MONTH(date) as month,
            CASE
            WHEN tc.classification = 'smallDiameter' THEN smallDiameter
            WHEN tc.classification = 'mediumDiameter' THEN mediumDiameter
            WHEN tc.classification = 'gimbal' THEN gimbal
            WHEN tc.classification = 'rab' THEN rab
            -- 如果有其他分类，可以继续在此添加
            ELSE 0
            END as production
        FROM productinfo
            JOIN TypeClassification tc ON tc.typeId = #{typeId}
        WHERE YEAR(date) = #{year}
          AND depositoryId = #{depositoryId}
            )
        SELECT
            a.month,
            a.monthly_amount,
            p.production,
            ROUND(CASE WHEN p.production = 0 THEN 0 ELSE a.monthly_amount / p.production END, 6) AS unit_price
        FROM MonthlyAmount a
                 JOIN MonthlyProduction p ON a.month = p.month
        ORDER BY a.month;
    </select>

</mapper>